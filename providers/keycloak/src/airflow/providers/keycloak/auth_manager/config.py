from airflow.api_fastapi.auth.managers.base_auth_manager import ResourceMethod as ExtendedResourceMethod
from airflow.api_fastapi.common.types import MenuItem
from airflow.security.permissions import RESOURCE_ASSET, RESOURCE_AUDIT_LOG, RESOURCE_CONNECTION, \
    RESOURCE_DAG, RESOURCE_DOCS, RESOURCE_PLUGIN, RESOURCE_POOL, RESOURCE_PROVIDER, RESOURCE_VARIABLE, \
    RESOURCE_XCOM, ACTION_CAN_CREATE, ACTION_CAN_READ, ACTION_CAN_EDIT, ACTION_CAN_DELETE, \
    ACTION_CAN_ACCESS_MENU, RESOURCE_DAG_DEPENDENCIES, RESOURCE_DAG_CODE, RESOURCE_DAG_RUN, \
    RESOURCE_DAG_VERSION, RESOURCE_DAG_WARNING, RESOURCE_ASSET_ALIAS, RESOURCE_BACKFILL, \
    RESOURCE_CLUSTER_ACTIVITY, RESOURCE_IMPORT_ERROR, RESOURCE_JOB, RESOURCE_MY_PASSWORD, RESOURCE_MY_PROFILE, \
    RESOURCE_SLA_MISS, RESOURCE_TASK_INSTANCE, RESOURCE_TASK_LOG, RESOURCE_WEBSITE, RESOURCE_BROWSE_MENU, \
    RESOURCE_DOCS_MENU, RESOURCE_CONFIG, RESOURCE_ADMIN_MENU, RESOURCE_TASK_RESCHEDULE, RESOURCE_TRIGGER, \
    RESOURCE_PASSWORD, RESOURCE_ROLE, RESOURCE_USER, RESOURCE_ACTION

from airflow.exceptions import AirflowException

from airflow.api_fastapi.auth.managers.models.resource_details import DagAccessEntity, AccessView

VIEWER_PERMISSIONS = [
    (ACTION_CAN_READ, RESOURCE_DAG),
    (ACTION_CAN_READ, RESOURCE_DAG_DEPENDENCIES),
    (ACTION_CAN_READ, RESOURCE_DAG_CODE),
    (ACTION_CAN_READ, RESOURCE_DAG_RUN),
    (ACTION_CAN_READ, RESOURCE_DAG_VERSION),
    (ACTION_CAN_READ, RESOURCE_DAG_WARNING),
    (ACTION_CAN_READ, RESOURCE_ASSET),
    (ACTION_CAN_READ, RESOURCE_ASSET_ALIAS),
    (ACTION_CAN_READ, RESOURCE_BACKFILL),
    (ACTION_CAN_READ, RESOURCE_CLUSTER_ACTIVITY),
    (ACTION_CAN_READ, RESOURCE_POOL),
    (ACTION_CAN_READ, RESOURCE_IMPORT_ERROR),
    (ACTION_CAN_READ, RESOURCE_JOB),
    (ACTION_CAN_READ, RESOURCE_MY_PASSWORD),
    (ACTION_CAN_EDIT, RESOURCE_MY_PASSWORD),
    (ACTION_CAN_READ, RESOURCE_MY_PROFILE),
    (ACTION_CAN_EDIT, RESOURCE_MY_PROFILE),
    (ACTION_CAN_READ, RESOURCE_SLA_MISS),
    (ACTION_CAN_READ, RESOURCE_TASK_INSTANCE),
    (ACTION_CAN_READ, RESOURCE_TASK_LOG),
    (ACTION_CAN_READ, RESOURCE_XCOM),
    (ACTION_CAN_READ, RESOURCE_WEBSITE),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_BROWSE_MENU),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_DAG),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_DAG_DEPENDENCIES),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_DAG_RUN),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_ASSET),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_CLUSTER_ACTIVITY),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_DOCS),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_DOCS_MENU),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_JOB),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_SLA_MISS),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_TASK_INSTANCE),
]
# [END security_viewer_perms]

# [START security_user_perms]
USER_PERMISSIONS = [
    (ACTION_CAN_EDIT, RESOURCE_DAG),
    (ACTION_CAN_DELETE, RESOURCE_DAG),
    (ACTION_CAN_CREATE, RESOURCE_TASK_INSTANCE),
    (ACTION_CAN_EDIT, RESOURCE_TASK_INSTANCE),
    (ACTION_CAN_DELETE, RESOURCE_TASK_INSTANCE),
    (ACTION_CAN_CREATE, RESOURCE_DAG_RUN),
    (ACTION_CAN_EDIT, RESOURCE_DAG_RUN),
    (ACTION_CAN_DELETE, RESOURCE_DAG_RUN),
    (ACTION_CAN_CREATE, RESOURCE_ASSET),
]
# [END security_user_perms]

# [START security_op_perms]
OP_PERMISSIONS = [
    (ACTION_CAN_READ, RESOURCE_CONFIG),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_ADMIN_MENU),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_CONNECTION),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_POOL),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_PLUGIN),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_VARIABLE),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_PROVIDER),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_CONFIG),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_XCOM),
    (ACTION_CAN_CREATE, RESOURCE_CONNECTION),
    (ACTION_CAN_READ, RESOURCE_CONNECTION),
    (ACTION_CAN_EDIT, RESOURCE_CONNECTION),
    (ACTION_CAN_DELETE, RESOURCE_CONNECTION),
    (ACTION_CAN_CREATE, RESOURCE_POOL),
    (ACTION_CAN_EDIT, RESOURCE_POOL),
    (ACTION_CAN_DELETE, RESOURCE_POOL),
    (ACTION_CAN_READ, RESOURCE_PLUGIN),
    (ACTION_CAN_READ, RESOURCE_PROVIDER),
    (ACTION_CAN_CREATE, RESOURCE_VARIABLE),
    (ACTION_CAN_READ, RESOURCE_VARIABLE),
    (ACTION_CAN_EDIT, RESOURCE_VARIABLE),
    (ACTION_CAN_DELETE, RESOURCE_VARIABLE),
    (ACTION_CAN_DELETE, RESOURCE_XCOM),
    (ACTION_CAN_CREATE, RESOURCE_ASSET),
    (ACTION_CAN_DELETE, RESOURCE_ASSET),
    (ACTION_CAN_CREATE, RESOURCE_BACKFILL),
    (ACTION_CAN_EDIT, RESOURCE_BACKFILL),
    (ACTION_CAN_DELETE, RESOURCE_BACKFILL),
]
# [END security_op_perms]

# [START security_admin_perms]
ADMIN_PERMISSIONS = [
    (ACTION_CAN_READ, RESOURCE_AUDIT_LOG),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_AUDIT_LOG),
    (ACTION_CAN_READ, RESOURCE_TASK_RESCHEDULE),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_TASK_RESCHEDULE),
    (ACTION_CAN_READ, RESOURCE_TRIGGER),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_TRIGGER),
    (ACTION_CAN_READ, RESOURCE_PASSWORD),
    (ACTION_CAN_EDIT, RESOURCE_PASSWORD),
    (ACTION_CAN_READ, RESOURCE_USER),
    (ACTION_CAN_EDIT, RESOURCE_USER),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_USER),
    (ACTION_CAN_READ, RESOURCE_ROLE),
    (ACTION_CAN_EDIT, RESOURCE_ROLE),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_ROLE),
    (ACTION_CAN_READ, RESOURCE_ACTION),
    (ACTION_CAN_EDIT, RESOURCE_ACTION),
    (ACTION_CAN_ACCESS_MENU, RESOURCE_ACTION),
]


_MAP_MENU_ITEM_TO_KEYCLOAK_RESOURCE_TYPE = {
    MenuItem.ASSETS: RESOURCE_ASSET,
    MenuItem.AUDIT_LOG: RESOURCE_AUDIT_LOG,
    MenuItem.CONNECTIONS: RESOURCE_CONNECTION,
    MenuItem.DAGS: RESOURCE_DAG,
    MenuItem.DOCS: RESOURCE_DOCS,
    MenuItem.PLUGINS: RESOURCE_PLUGIN,
    MenuItem.POOLS: RESOURCE_POOL,
    MenuItem.PROVIDERS: RESOURCE_PROVIDER,
    MenuItem.VARIABLES: RESOURCE_VARIABLE,
    MenuItem.XCOMS: RESOURCE_XCOM,
}


def get_map_menu_item_to_keycloak_resource_type():
    return _MAP_MENU_ITEM_TO_KEYCLOAK_RESOURCE_TYPE


_MAP_METHOD_NAME_TO_ACTION_NAME: dict[ExtendedResourceMethod, str] = {
    "POST": ACTION_CAN_CREATE,
    "GET": ACTION_CAN_READ,
    "PUT": ACTION_CAN_EDIT,
    "DELETE": ACTION_CAN_DELETE,
    "MENU": ACTION_CAN_ACCESS_MENU,
}


def get_kc_action_from_method_map():
    return _MAP_METHOD_NAME_TO_ACTION_NAME


_MAP_KC_ROLE_TO_PERMISSION = {
    "PUBLIC": [],
    "VIEWER": VIEWER_PERMISSIONS,
    "USER": VIEWER_PERMISSIONS + USER_PERMISSIONS,
    "OP": VIEWER_PERMISSIONS + USER_PERMISSIONS + OP_PERMISSIONS,
    "ADMIN": VIEWER_PERMISSIONS + USER_PERMISSIONS + OP_PERMISSIONS + ADMIN_PERMISSIONS
}


def get_map_kc_role_to_permission(role):
    if role not in _MAP_KC_ROLE_TO_PERMISSION:
        raise AirflowException("Role not configured")

    return _MAP_KC_ROLE_TO_PERMISSION[role]

_MAP_DAG_ACCESS_ENTITY_TO_RESOURCE_TYPE: dict[DagAccessEntity, tuple[str, ...]] = {
    DagAccessEntity.AUDIT_LOG: (RESOURCE_AUDIT_LOG,),
    DagAccessEntity.CODE: (RESOURCE_DAG_CODE,),
    DagAccessEntity.DEPENDENCIES: (RESOURCE_DAG_DEPENDENCIES,),
    DagAccessEntity.RUN: (RESOURCE_DAG_RUN,),
    DagAccessEntity.SLA_MISS: (RESOURCE_SLA_MISS,),
    # RESOURCE_TASK_INSTANCE has been originally misused. RESOURCE_TASK_INSTANCE referred to task definition
    # AND task instances without making the difference
    # To be backward compatible, we translate DagAccessEntity.TASK_INSTANCE to RESOURCE_TASK_INSTANCE AND
    # RESOURCE_DAG_RUN
    # See https://github.com/apache/airflow/pull/34317#discussion_r1355917769
    DagAccessEntity.TASK: (RESOURCE_TASK_INSTANCE,),
    DagAccessEntity.TASK_INSTANCE: (RESOURCE_DAG_RUN, RESOURCE_TASK_INSTANCE),
    DagAccessEntity.TASK_LOGS: (RESOURCE_TASK_LOG,),
    DagAccessEntity.TASK_RESCHEDULE: (RESOURCE_TASK_RESCHEDULE,),
    DagAccessEntity.VERSION: (RESOURCE_DAG_VERSION,),
    DagAccessEntity.WARNING: (RESOURCE_DAG_WARNING,),
    DagAccessEntity.XCOM: (RESOURCE_XCOM,),
}

def get_map_dag_access_entity_to_resource_type():
    return _MAP_DAG_ACCESS_ENTITY_TO_RESOURCE_TYPE

_MAP_ACCESS_VIEW_TO_RESOURCE_TYPE = {
    AccessView.CLUSTER_ACTIVITY: RESOURCE_CLUSTER_ACTIVITY,
    AccessView.DOCS: RESOURCE_DOCS,
    AccessView.IMPORT_ERRORS: RESOURCE_IMPORT_ERROR,
    AccessView.JOBS: RESOURCE_JOB,
    AccessView.PLUGINS: RESOURCE_PLUGIN,
    AccessView.PROVIDERS: RESOURCE_PROVIDER,
    AccessView.TRIGGERS: RESOURCE_TRIGGER,
    AccessView.WEBSITE: RESOURCE_WEBSITE,
}

def get_map_access_view_to_resource_type():
    return _MAP_ACCESS_VIEW_TO_RESOURCE_TYPE
